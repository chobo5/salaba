<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="salaba.dao.BoardDao">

  <!-- 게시판 -->
  <resultMap id="BoardMap" type="Board">
    <id column="board_no" property="boardNo"/>
    <result column="title" property="title"/>
    <result column="head_no" property="headNo"/>
    <result column="head_content" property="headContent"/>
    <result column="content" property="content"/>
    <result column="created_date" property="createdDate"/>
    <result column="file_count" property="fileCount"/>
    <result column="board_category_no" property="categoryNo"/>
    <result column="scope_no" property="scopeNo"/>
    <result column="view_count" property="viewCount"/>
    <result column="like_count" property="likeCount"/>
    <result column="my_like_count" property="myLikeCount"/>
    <result column="scope_name" property="scopeName"/>
    <result column="state" property="state"/>

    <!-- 회원 정보 가져오기 -->
    <association property="writer" javaType="Member">
      <id column="member_no" property="no"/>
      <result column="nickname" property="nickname"/>
    </association>

    <!-- 지역 정보 가져오기 -->
    <association property="region" javaType="Region">
      <id column="region_no" property="regionNo"/>
      <result column="region_name" property="regionName"/>
    </association>

    <!-- 첨부 파일 -->
    <collection property="fileList" ofType="BoardFile">
      <id column="file_no" property="fileNo"/>
      <result column="board_no" property="boardNo"/>
      <result column="ori_file_name" property="oriFileName"/>
      <result column="uuid_file_name" property="uuidFileName"/>
    </collection>

    <!-- 댓글 -->
    <collection property="commentList" ofType="Comment">
      <id column="comment_no" property="commentNo"/>
      <result column="content" property="content"/>
      <result column="created_date" property="createdDate"/>
      <result column="state" property="state"/>
    </collection>

    <!-- 답글 -->
    <collection property="replyList" ofType="Reply">
      <id column="reply_no" property="replyNo"/>
      <result column="content" property="content"/>
      <result column="created_date" property="createdDate"/>
      <result column="state" property="state"/>
    </collection>
  </resultMap>

  <insert id="addBoard" parameterType="Board"
    useGeneratedKeys="true" keyColumn="board_no" keyProperty="boardNo">
    <if test="categoryNo == 0">
    insert into board(scope_no,title,content,member_no,board_category_no,region_no,head_no)
    values(#{scopeNo},#{title},#{content},#{writer.no},#{categoryNo},#{region.regionNo},0)
    </if>
    <if test="categoryNo != 0">
      insert into board(scope_no,head_no,title,content,member_no,board_category_no)
      values(#{scopeNo},#{headNo},#{title},#{content},#{writer.no},#{categoryNo})
    </if>
  </insert>

  <update id="deleteBoard">
    update board set
    state='1'
    where
    board_no=#{boardNo}
  </update>

  <select id="findAll" resultMap="BoardMap">
    select
    b.board_no,
    b.board_category_no,
    b.title,
    b.content,
    b.created_date,
    b.view_count,
    (select count(*) from board_like where board_no=b.board_no) as like_count,
    m.member_no,
    m.nickname,
    h.head_no,
    h.head_content,
    r.region_no,
    r.region_name,
    count(distinct bf.file_no) as file_count, -- 파일 수 계산
    bf.uuid_file_name,
    bs.scope_name,
    bs.scope_no
    from
    board b
    inner join head h on b.head_no=h.head_no
    inner join member m on b.member_no=m.member_no
    left join board_like bl on b.board_no=bl.board_no
    left join board_file bf on b.board_no=bf.board_no
    left join region r on b.region_no=r.region_no
    inner join board_scope bs on b.scope_no=bs.scope_no
    where
    b.board_category_no=#{categoryNo}
    AND
    b.state != '1'
    group by
    b.board_no, b.view_count
    order by
    like_count desc,
    b.created_date desc
  </select>

  <select id="main" resultMap="BoardMap">
    select
    b.board_no,
    b.board_category_no,
    b.title,
    b.view_count,
    b.content,
    b.created_date,
    (select count(*) from board_like bl where bl.board_no=b.board_no) as like_count,
    m.member_no,
    m.nickname,
    h.head_no,
    h.head_content,
    bf.file_no,
    bf.uuid_file_name,
    r.region_no,
    r.region_name,
    bs.scope_name,
    bs.scope_no
    from
    board b
    inner join head h on b.head_no=h.head_no
    inner join member m on b.member_no=m.member_no
    left join board_file bf on b.board_no=bf.board_no
    left join region r on b.region_no=r.region_no
    inner join board_scope bs on b.scope_no=bs.scope_no
    group by
    b.board_no
    order by
    like_count desc,
    created_date desc
  </select>

  <select id="findBy" resultMap="BoardMap">
    select
    b.board_no,
    b.board_category_no,
    b.title,
    b.content,
    b.view_count,
    b.created_date,
    <if test="categoryNo != 0">
    h.head_no,
    h.head_content,
    </if>
    <if test="categoryNo == 0">
    r.region_no,
    r.region_name,
    </if>
    bs.scope_name,
    bs.scope_no,
    m.member_no,
    m.nickname,
    (select count(*) from board_like where board_no=b.board_no) as like_count,
    (select count(*) from board_like where board_no=b.board_no and member_no=m.member_no) as my_like_count
    from
    board b
    left join head h on b.head_no=h.head_no
    inner join board_scope bs on b.scope_no=bs.scope_no
    inner join member m on b.member_no=m.member_no
    left outer join comment c on b.board_no = c.board_no
    left outer join reply rp on c.comment_no = rp.comment_no
    left join region r on b.region_no=r.region_no
    where
    b.board_no= #{boardNo}
    order by
    b.created_date
  </select>

<!-- 게시글 변경 -->
  <update id="updateBoard" parameterType="Board">
    update board set
    title=#{title},
    content=#{content}
    where
    board_no=#{boardNo}
  </update>

  <!-- 댓글 작성 시 게시판 번호 찾기 -->
  <select id="findByBoardNo" parameterType="int" resultType="Board">
    SELECT
    board_no
    FROM
    board
    WHERE board_no = #{boardNo}
  </select>

<!-- 조회수 업데이트: 비공개 글에서는 조회수 증가 불가 -->
  <update id="increaseViewCount" parameterType="Board">
    UPDATE board
    SET
    view_count = view_count + 1
    WHERE
    board_no = #{boardNo}
    AND scope_no != 2
  </update>


  <!-- 추천수 업데이트 -->
  <insert id="increaseLikeCount">
    INSERT INTO board_like (board_no, member_no)
    VALUES (#{boardNo}, #{memberNo})
  </insert>

  <delete id="decreaseLikeCount">
    delete from board_like
    where board_no = #{boardNo}
    and member_no = #{memberNo}
  </delete>

  <select id="countLike" resultType="int">
    select count(*) from board_like
    where board_no = #{boardNo}
     AND member_no = #{memberNo}
  </select>



  <!--  &lt;!&ndash; 검색 기능 &ndash;&gt;-->
<!--    <select id="search" parameterType="map" resultMap="boardMap">-->
<!--      SELECT * FROM board-->
<!--      WHERE-->
<!--      <choose>-->
<!--        <when test="type == 'title'">-->
<!--          title LIKE CONCAT('%', #{query}, '%')-->
<!--        </when>-->
<!--        <when test="type == 'content'">-->
<!--          content LIKE CONCAT('%', #{query}, '%')-->
<!--        </when>-->
<!--        <when test="type == 'date'">-->
<!--          DATE(created_date) = #{query}-->
<!--        </when>-->
<!--      </choose>-->
<!--    </select>-->

  <!-- 페이지 -->
  <select id="countAll" resultType="int" parameterType="int">
    select count(*) from board where board_category_no=#{value}
  </select>
</mapper>